<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Adam Mark]]></title>
  <link href="http://www.adammark.net/atom.xml" rel="self"/>
  <link href="http://www.adammark.net/"/>
  <updated>2013-05-07T16:40:56-04:00</updated>
  <id>http://www.adammark.net/</id>
  <author>
    <name><![CDATA[Adam Mark]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[App Cloud vs. PhoneGap: Which hybrid-native platform is right for you?]]></title>
    <link href="http://www.adammark.net/blog/2012/11/16/app-cloud-vs-phonegap/"/>
    <updated>2012-11-16T12:24:00-05:00</updated>
    <id>http://www.adammark.net/blog/2012/11/16/app-cloud-vs-phonegap</id>
    <content type="html"><![CDATA[<p>When I talk to developers about App Cloud, they often ask, “How is App Cloud
different from PhoneGap?” Without missing a beat, I give my stock answer:
“PhoneGap is great, but App Cloud gives you so much more.” The matter of
<em>more</em> has always nagged at me—<em>more is not necessarily better</em>—so I decided
to do an apples-to-apples comparison from a Web developer’s perspective. I
built the same app twice, first with PhoneGap, then with App Cloud, and graded
each system on the strength of its platform capabilities, development model,
and service offerings.</p>

<p><em>Spoiler alert: Both App Cloud and PhoneGap are winners! Skip to the end to see
my conclusions.</em></p>

<h2>First impressions</h2>

<p><strong>PhoneGap:</strong>  I located and downloaded the latest version of the
<a href="http://phonegap.com/download">PhoneGap SDK</a> in about 15 seconds without any fumbling. This made a great
first impression. And I noticed PhoneGap offers a public archive and full
documentation of its old SDKs, which gave me peace of mind as a developer.
Finally, I found <a href="http://phonegap.com/">phonegap.com</a> to be neatly organized, with clear
pathways to documentation, community support, and case studies.</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-phonegap-phonegap-download.png" alt="" /></p>

<p><strong>App Cloud:</strong>  I <a href="https://register.brightcove.com/en/app-cloud">registered for a free account</a> before downloading the
SDK. (If you’re impatient like me, you’ll find the registration step annoying.
But it’s necessary if you want to use cloud services like cloud compilation,
push notifications, and analytics.) After registering, I landed in App Cloud
Studio, where I found links to the SDK, the <a href="http://bit.ly/iworkshop">Workshop</a> app, video tutorials
and community support. I downloaded the SDK and the Workshop app.</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-phonegap-studio-download.png" alt="" /></p>

<h2>Getting started</h2>

<p><strong>PhoneGap:</strong>  I unzipped the SDK, cracked open the getting started guides,
and followed the instructions for setting up my development environments on
iOS and Android. What looked simple on paper turned out to be insanely
complicated.</p>

<p><a href="http://docs.phonegap.com/en/2.0.0/guide_getting-started_ios_index.md.html">Getting started on iOS</a> required downloading and installing XCode. But to
download XCode, I had to upgrade my operating system to version 10.7 from
version 10.6.8. This took four hours.</p>

<p><a href="http://docs.phonegap.com/en/2.0.0/guide_getting-started_android_index.md.html">Getting started on Android</a> was even more of an exercise in patience. I
downloaded <a href="http://www.eclipse.org/downloads/">Eclipse</a>, then the <a href="http://developer.android.com/sdk/installing/index.html">Android SDK</a>, then the
<a href="http://developer.android.com/tools/sdk/eclipse-adt.html#installing">Android Developer Tools plugin</a>. At each pass I was presented a dizzying
array of options. For example, there were <em>12 versions</em> of Eclipse and
<em>11 versions</em> of the Android SDK:</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-phonegap-android-sdk.png" alt="" /></p>

<p>Whew! All told, getting started with PhoneGap took nearly a whole day, and I
had yet to write a single line of code.</p>

<p><strong>App Cloud:</strong> <a href="http://docs.brightcove.com/en/app-cloud-api/quick-start-app-cloud.html">Getting started with App Cloud</a> was a breeze by comparison.
First I downloaded the <a href="http://bit.ly/iworkshop">Workshop</a> app onto my iPhone and Android phone.
Then I unzipped the SDK, double-clicked the <a href="http://nodejs.org/">Node.js</a> installer, ran the
startup script, and opened the App Cloud development server in my browser. In
about ten minutes, I was ready to start coding.</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-phonegap-node-console.png" alt="" /></p>

<h2>Hello World!</h2>

<p><strong>PhoneGap:</strong> I opened XCode and followed PhoneGap’s “Hello World”
instructions for creating a new Cordova iOS project from a shell script. This
appeared to work until I tried running the project in the iPhone simulator:</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-phonegap-xcode-error.png" alt="" /></p>

<p>As it turned out, the local copy of the <a href="http://docs.phonegap.com/en/2.0.0/guide_getting-started_ios_index.md.html">getting started guide</a> was out of
date and omitted a key step: installing the Cordova library. I deleted the
project, installed the Cordova library, and ran the script again. Then I
tweaked index.html and opened the app in the simulator:</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-phonegap-phonegap-hello.png" alt="" /></p>

<p>Nice! Getting the app onto my iPhone was a bit trickier. I had to register my
device in the <a href="https://developer.apple.com/ios/">iOS Provisioning Portal</a>, then create a provisioning
profile, then create a development certificate, then install the certificate.
While these steps are necessary to create an iOS app in any framework, it was
cumbersome to go through these motions just to run my “Hello World” app.</p>

<p>As for Android, it once again threw me for a loop. I simply couldn’t get my
“Hello World” app to run in the Android Emulator despite all my attempts to
create and launch an Android Virtual Device in Eclipse. After a frustrating
couple hours—even stackoverflow was no help—I managed to create a device image
via the Android SDK Manager, then launch the emulator:</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-phonegap-android-emulator.png" alt="" /></p>

<p><strong>App Cloud:</strong> I ran the provided Node.js script to create a starter app
inside App Cloud’s development server. Then I popped open Chrome and navigated
to the app:</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-phonegap-node-scaffold.png" alt="" /></p>

<p>I made a few changes to a CSS file and refreshed the web browser—a quick win.
Then I opened the Workshop app on my iPhone and scanned the QR code that
appeared in the web browser. In three seconds, the app loaded on my phone. I
made some more changes to the CSS and pulled down the “Refresh” tab in the
Workshop. The changes appeared. Then I did the same thing on my Galaxy Nexus.</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-phonegap-workshops.png" alt="" /></p>

<p><em>By now I’ve gone through this process a thousand times, yet I’m always
floored by it.</em> In just a few minutes, I was previewing an app on both iOS and
Android, making changes, and seeing the changes take effect immediately. And I
did it without XCode, without the Android Developer Tools, and without any
specific knowledge of native app development.</p>

<h2>Structuring the app</h2>

<p><strong>PhoneGap:</strong> I wanted my sample app, a simple news reader, to have two
distinct views, one for displaying the latest news and one for displaying my
saved articles. I assumed I could use two HTML pages to create the backing for
these views, but I was surprised to learn that I had to build my entire
PhoneGap app within the context of a single HTML page. I imagined my code
would get pretty messy without using a JavaScript MVC framework to manage it,
and I worried about the performance implications of doing too many things
inside one page.</p>

<p>I was also disappointed by the lack of support for native navigation across
iOS and Android, so I had to roll my own navigation in HTML. Not wanting to
use an iOS-style tab bar on Android or an Android-style action bar on iOS, I
settled on a generic design that would accommodate both platforms.</p>

<p>Finally, I found no built-in functions for handling basic tasks like scrolling
and pagination. After exploring a few different UI libraries, I decided to
install <a href="http://jquerymobile.com/">jQuery Mobile</a>, a popular tool for building mobile web sites.</p>

<p><strong>App Cloud:</strong> Unlike PhoneGap, App Cloud apps are backed by multiple HTML
files, each corresponding to an independent view in the UI. A typical
content-driven app might have four or five views, and the developer can choose
whether or not to display native navigation to help the user navigate from
view to view. In this sense, the UI is truly “hybrid.” On iOS, users see the
familiar tab bar and “More &#8230;” menu; on Android, users see an action bar.</p>

<p>As I discovered early on, spreading code and functionality across multiple
views is a good thing for a few reasons. First, the native container can
unload individual views if it needs to free up memory (instead of crashing).
Second, developers can neatly organize their code by view (each HTML page has
its own DOM, its own CSS, and its own JavaScript). Finally, because the app is
broken into multiple views, the code itself is more portable.</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-phonegap-structure.png" alt="" /></p>

<p>App Cloud has a thin UI layer, but it does 90% of what I need: “tap” events,
smooth scrolling, and page transitions inside a single view. I like having
these basic functions available out of the box. As with PhoneGap, App Cloud
lets you drop in third-party JavaScript libraries. (I’ve used many, including
<a href="http://momentjs.com/">Moment.js</a> for date formatting and <a href="http://eightmedia.github.com/hammer.js/">Hammer.js</a> for gesture support.)</p>

<p>Another nice feature: App Cloud loads HTML “templates” from plain text files
on the device’s file system and populates them in the <code>bc.templates</code> object.
This makes it easy to separate control logic from presentation logic using
Markup.js (included in the App Cloud SDK) or a templating framework of your
choosing.</p>

<h2>Making the app</h2>

<p><strong>PhoneGap:</strong> Even though I was able to use my <a href="http://www.sublimetext.com/2">favorite text editor</a> and
stage the app on a local web server (Apache), I still had to run XCode and
Eclipse in order to build and preview the app on my iPhone and Nexus. Every
few minutes I went through the same motions: <em>1. Switch contexts from my text
editor to Xcode, then to Eclipse. 2. Run the app in the iPhone simulator, then
in the Android emulator. 3. Deploy to each device.</em> This got tiresome. (I
looked at <a href="https://build.phonegap.com/">PhoneGap Build</a> as a potential time saver, but it didn’t strike
me as a convenient development tool. It’s a build tool, as the name implies. I
also looked at <a href="https://build.phonegap.com/docs/hydration">Hydration</a> but got scared away by the docs. What’s a
“non-Hydrated binary equivalent?”)</p>

<p>At this point it occurred to me that I was dealing with two different code
bases to make two different apps, one for iOS and one for Android. A fellow
engineer suggested I create a symbolic link between the www directories in
each project, which seemed kludgy to me.</p>

<p><strong>App Cloud:</strong> I staged my app in App Cloud’s local development server
(running on Node.js) and tested much of it in Chrome. When it came to testing
the app on my iPhone and Nexus, I simply loaded it up in the Workshop app.</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-phonegap-reload.png" alt="" /></p>

<p>The Workshop app extends the development model that all web developers have
come to know: <em>Code, refresh, repeat.</em> The ability to test an app
incrementally—without long delays and without having to reboot the app—saves a
tremendous amount of time and frustration.</p>

<p>Finally, unlike PhoneGap, I was working with a single code base of HTML, CSS,
and JavaScript files, even though I was building for iOS and Android at the
same time. There was simply less code to move around.</p>

<h2>Working with content</h2>

<p><strong>PhoneGap:</strong> I pulled an RSS feed directly from my web site using jQuery’s
<a href="http://api.jquery.com/jQuery.get/">get()</a> method. Then I converted it to JavaScript object with the help of
an <a href="http://www.fyneworks.com/jquery/xml-to-json/">XML to JSON plugin</a>. To cache content on the device, I used
<a href="http://diveintohtml5.info/storage.html">Local Storage</a> methods.</p>

<p><strong>App Cloud:</strong> As with PhoneGap, I used <code>$.get()</code> to pull down the RSS. When
it came to storing data on the device, I used <a href="http://docs.brightcove.com/en/app-cloud-api/core/symbols/bc.core.html#.cache">bc.core.cache()</a>, which
uses a Least Recently Used algorithm to clear data if the cache ever fills up.
App Cloud’s caching function also handles serialization and deserialization of
objects.</p>

<p>Taking it a step further, I decided to run my data through an App Cloud
content feed, then load it using the SDK method <a href="http://docs.brightcove.com/en/app-cloud-api/core/symbols/bc.core.html#.getData">bc.core.getData()</a>. This
service has multiple benefits: First, it lightens the load on the origin
server (in my case, a small Wordpress site). The App Cloud server periodically
fetches new data, caches it, and makes it highly available to thousands of
devices. Second, App Cloud reduces the size of the payload by eliminating
unnecessary data fields. Third, App Cloud converts the data from XML to JSON
on the server side, flattens it, compresses it, and provides a convenient
interface for accessing it.</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-phonegap-feeds.png" alt="" /></p>

<h2>Working with the device</h2>

<p><strong>PhoneGap:</strong> While I didn’t really take advantage of native device
capabilities, I noticed that PhoneGap’s device API is more mature than App
Cloud’s. For example, PhoneGap supports access to the <a href="http://docs.phonegap.com/en/2.0.0/cordova_contacts_contacts.md.html#Contacts">contacts database</a>
and <a href="http://docs.phonegap.com/en/2.0.0/cordova_compass_compass.md.html#Compass">compass</a>. It also has a nice interface for determining the device’s
<a href="http://docs.phonegap.com/en/2.0.0/cordova_connection_connection.md.html#Connection">connection type</a>. And the API itself is very well organized.</p>

<p><strong>App Cloud:</strong> While App Cloud offered less in the way of device capabilities,
there were some built-in features that I found to be invaluable. First, it’s
often necessary to display external web content without forcing the user to
leave the app. For this reason, the App Cloud SDK makes it extremely easy to
open native modal windows. (PhoneGap has some plugins for this, but they
require extra configuration.) Second, many types of content apps require
multiple, distinct views. By default, App Cloud supports multiple views backed
by native navigation controls. Developers can hide the navigation bar outright
or toggle it via <a href="http://docs.brightcove.com/en/app-cloud-api/core/symbols/bc.device.html#.enterFullScreen">bc.device.enterFullScreen()</a> and
<a href="http://docs.brightcove.com/en/app-cloud-api/core/symbols/bc.device.html#.exitFullScreen">bc.device.exitFullScreen()</a>.</p>

<p><em>Note: App Cloud will soon release its own plugin development kit that allows
developers to create custom native functionality on top of the App Cloud SDK.</em></p>

<h2>Running the app</h2>

<p><strong>PhoneGap:</strong> From a distance, it was hard to distinguish between PhoneGap and
App Cloud. But there were a couple issues with PhoneGap. First, I was unhappy
with the smooth scrolling (or lack thereof) in jQuery Mobile, my chosen UI
layer. I considered switching to <a href="http://www.kendoui.com/mobile.aspx">Kendo UI Mobile</a>, but I didn’t want to pay
$199 for it. I also looked at <a href="http://www.sencha.com/products/touch/">Sencha Touch</a>, but it was too bulky (a 55MB
download). I settled on iScroll. Problem solved. Second, the part of my UI
that displayed multiple images (at 150KB each) was noticeably slower to load.</p>

<p><strong>App Cloud:</strong> I cheated here and used App Cloud’s <a href="http://support.brightcove.com/en/docs/transcoding-images">image transcoding API</a>,
even though it’s not part of the free edition (App Cloud Core). I cropped and
scaled each thumbnail image on the fly, shaving nearly 1MB off the total
payload and speeding up the rendering of the UI. Sure, I could have cut
up these images by hand, but that’s simply not practical to do when delivering
dynamic images to multiple platforms across many types of devices.</p>

<p>I also saved a few cycles by loading my data through an App Cloud content
feed. Not only was the payload smaller, I didn’t need to convert it from XML
to JSON on the client.</p>

<p>App Cloud’s smooth scrolling was also faster than iScroll when handling
complex content.</p>

<p>One final note on performance: Both apps ran faster on iOS than on Android.</p>

<h2>Building the app</h2>

<p><strong>PhoneGap:</strong> Since I had already done the hard work of setting up XCode and
the Android Developer Tools, building the app for production was relatively
straightforward. I just repeated what I had already done a dozen times during
development (although I added my own icons and loading images).</p>

<p><strong>App Cloud:</strong> I zipped up the directory containing my static assets—HTML,
CSS, JS, etc.—and uploaded it to App Cloud Studio. Then I clicked “Publish
App” and was asked to enter tons of provisioning information for iOS and
Android. Although tedious, this process was certainly easier than having to
build the apps myself, and at the end I was able to download an IPA file for
iOS and an APK file for Android.</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-phonegap-studio-download.png" alt="" /></p>

<h2>And the winner is &#8230;</h2>

<p>I think PhoneGap and App Cloud are both winners, but in different categories.
PhoneGap wins for having a more robust device API, great documentation and
examples, and a large ecosystem of plugins. (As I mentioned above, App Cloud
is about to release its own plugin framework, and it will support many
PhoneGap plugins.) App Cloud wins for its elegant development model—<em>the
Workshop app is simply unmatched</em>—and for its array of cloud services.</p>

<p>The biggest distinction is this: While PhoneGap is a development platform, App
Cloud is a development platform and an operational platform at the same time.
In my simple demo app, I took advantage of two App Cloud services: image
transcoding and content feed optimization. I also compiled my iOS and Android
apps in the cloud from a single code base. In a more complex app, I would use
App Cloud’s <a href="http://blog.brightcove.com/en/2012/04/using-cross-platform-push-notifications-app-cloud">push notification API</a>, real-time analytics, and remote
configuration capabilities. Sure, these things are possible with PhoneGap, but
not without cobbling together lots of moving parts from many different
vendors.</p>

<p>I encourage web developers who are exploring hybrid-native solutions to
evaluable both platforms as I have. You might find PhoneGap to be exactly what
you’re looking for: a cross-platform development kit. But if you need more in
the way of services (image transcoding, content optimization, push
notifications, etc.) and less in the way of heavy toolchains (XCode and
Eclipse), take App Cloud for a spin.</p>

<p>Both App Cloud and PhoneGap have a lot to offer. I hope they continue to push
each other—and web developers—forward.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Opening a modal email window in App Cloud]]></title>
    <link href="http://www.adammark.net/blog/2012/11/15/opening-a-modal-email-window-in-app-cloud/"/>
    <updated>2012-11-15T14:56:00-05:00</updated>
    <id>http://www.adammark.net/blog/2012/11/15/opening-a-modal-email-window-in-app-cloud</id>
    <content type="html"><![CDATA[<p>The latest version of the <a href="http://appcloud.brightcove.com">App Cloud</a> SDK (1.12) introduces a new device
method for launching a modal email window inside an app. (Previously, the only
way to launch a native email client was through a &#8220;mailto&#8221; link, which bounced
users out of the app. Boo.) Here&#8217;s how to do it:</p>

<pre><code>// all properties optional
var options = {
    toRecipients: "john@example.com, jane@example.com",
    subject: "Check it out!",
    body: "I found this interesting: http://www.example.com/"
};

// fired when the email is sent
var successCallback = function () {
    // yay!
};

// fired if the user cancels
var errorCallback = function (error) {
    // boo!
};

// open the modal
bc.device.modalEmail.composeEmail(successCallback, errorCallback, options);
</code></pre>

<p>Of course, in your own code you&#8217;d have to pass some real data into the options
object. Check out the <a href="http://docs.brightcove.com/en/app-cloud-api/core/symbols/bc.device.modalEmail.html">API docs</a> for a full rundown.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitoring the connection state in App Cloud]]></title>
    <link href="http://www.adammark.net/blog/2012/09/20/monitoring-the-connection-state-in-app-cloud/"/>
    <updated>2012-09-20T12:00:00-04:00</updated>
    <id>http://www.adammark.net/blog/2012/09/20/monitoring-the-connection-state-in-app-cloud</id>
    <content type="html"><![CDATA[<p>The latest version of the <a href="http://appcloud.brightcove.com">App Cloud</a> SDK (1.11) introduces a new type of
event for monitoring whether the user is online or offline. It&#8217;s a snap to
use:</p>

<pre><code>$(bc).on("connectionstatechange", function(evt, data) {
    if (data.online) {
        // do something
    }
    else {
        // do something else
    }
});
</code></pre>

<p>Now you can take appropriate action when a user&#8217;s connection goes in or out.
For example, say you want to show a status indicator:</p>

<pre><code>function displayStatusIndicator(online) {
    // show or hide the indicator
}

$(bc).on("connectionstatechange", function(evt, data) {
    displayStatusIndicator(data.online);
});
</code></pre>

<p>Sometimes it&#8217;s necessary to check the connection status before performing a
particular action. For this you can look to the <code>bc.context</code> object:</p>

<pre><code>$(bc).on("init", function (evt) {
    if (bc.context.online) {
        loadNews();
    }
    else {
        displayCachedNews();
        showOfflineMessage();
    }
});
</code></pre>

<p>Together, the <code>connectionstatechange</code> event and <code>bc.context.online</code> property
can help you handle network failures gracefully.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markup.js: Custom pipes for your piping pleasure]]></title>
    <link href="http://www.adammark.net/blog/2012/09/19/markup-dot-js-custom-pipes-for-your-piping-pleasure/"/>
    <updated>2012-09-19T15:13:00-04:00</updated>
    <id>http://www.adammark.net/blog/2012/09/19/markup-dot-js-custom-pipes-for-your-piping-pleasure</id>
    <content type="html"><![CDATA[<p>While <a href="https://github.com/adammark/Markup.js">Markup.js</a> comes with more than 40 built-in pipes for everyday use,
I always write a few custom pipes whenever I build an <a href="http://appcloud.brightcove.com">App Cloud</a> app. Here
are some of my favorites.</p>

<h3>highlight</h3>

<p>Use this pipe to highlight a search term or other pattern in a string. Note
the use of backticks in the example to denote a context variable on the right
side of the expression.</p>

<pre><code>// Example: {{article|highlight&gt;`searchTerm`}}

Mark.pipes.highlight = function (str, pattern) {
    return str.replace(new RegExp("(" + pattern + ")", "g"), "&lt;em&gt;$1&lt;/em&gt;");
};
</code></pre>

<h3>address</h3>

<p>Use this pipe to wrap an address in a Google Maps link.</p>

<pre><code>// Example: {{home_addr|address}}

Mark.pipes.address = function (addr) {
    return "&lt;a href=\"http://maps.google.com/maps?q=" + encodeURI(addr) + "&gt;" + addr + "&lt;/a&gt;";
};
</code></pre>

<h3>links</h3>

<p>Use this pipe to convert all URLs in a string to links.</p>

<pre><code>// Example: {{story|links}}

Mark.pipes.links = function (str) {
    return str.replace(/\b(https?:[^\b\s]+)\b/g, "&lt;a href=\"$1\"&gt;$1&lt;/a&gt;");
};
</code></pre>

<h3>repeat</h3>

<p>Use this pipe to repeat a string. Note <code>count</code> defaults to 2 and <code>separator</code>
defaults to &#8220;&#8221;.</p>

<pre><code>// Example: {{chorus|repeat&gt;5}}

Mark.pipes.repeat = function (str, count, separator) {
    return new Array(+count || 2).join(str + (separator || "")) + str;
};
</code></pre>

<h3>moment</h3>

<p>Use this pipe to format a date with <a href="http://momentjs.com/">Moment.js</a>.</p>

<pre><code>// Example: {{created_at|moment&gt;M/D/YYYY}}

Mark.pipes.moment = function (date, format) {
    return moment(new Date(+date || date)).format(format);
};
</code></pre>

<h3>dollars</h3>

<p>Use this pipe to format a number in dollars with <a href="http://josscrowcroft.github.com/accounting.js/">Accounting.js</a>.</p>

<pre><code>// Example: {{price|dollars}}

Mark.pipes.dollars = function (num) {
    return accounting.formatMoney(+num);
};
</code></pre>

<h3>phone</h3>

<p>Use this pipe to format a U.S. phone number.</p>

<pre><code>// Example: {{mobile_phone|phone}}

Mark.pipes.phone = function (str) {
    var s = str.replace(/[^\d]/g, "");
    return "(" + s.substr(0, 3) + ") " + s.substr(3, 3) + "-" + s.substr(6, 4);
};
</code></pre>

<h3>ordinal</h3>

<p>Use this pipe to express a number as an ordinal, e.g. &#8220;10th&#8221;.</p>

<pre><code>// Example: {{contestant.standing|ordinal}}

Mark.pipes.ordinal = function (num) {
    if (num &gt; 10 &amp;&amp; num &lt; 20) {
        return num + "th";
    }
    return num + ["th","st","nd","rd","th","th","th","th","th","th"][num % 10];
};
</code></pre>

<h3>runtime</h3>

<p>Use this pipe to express a number in stopwatch notation (&#8220;mm:ss&#8221;) given a
factor of 1 (seconds) or 1000 (milliseconds). Note <code>factor</code> defaults to 1.</p>

<pre><code>// Example: {{duration|runtime}}

Mark.pipes.runtime = function (time, factor) {
    var m = Math.floor(time / (60 * (factor || 1)));
    var s = Math.floor((time / (factor || 1)) % 60);
    return m + ":" + ("00" + s).substr(-2);
};
</code></pre>

<h3>has</h3>

<p>Use this pipe to determine if an array contains an object with the given
property value.</p>

<pre><code>// Example: {{if fruits|has&gt;color&gt;red}} ... {{/if}}

Mark.pipes.has = function (arr, prop, val) {
    return arr.some(function (item) {
        return item[prop] == val;
    });
};
</code></pre>

<h3>sift</h3>

<p>Use this pipe to filter an array of objects to only those having the given
property value.</p>

<pre><code>// Example: &lt;ul&gt; {{fruits|sift&gt;color&gt;red}} &lt;li&gt;{{fruit.name}}&lt;/li&gt; {{/fruits}} &lt;/ul&gt;

Mark.pipes.sift = function (arr, prop, val) {
    return arr.filter(function (item) {
        return item[prop] == val;
    });
};
</code></pre>

<h3>stars</h3>

<p>Use this pipe to print star and half-star characters given a decimal input.
Note this requires <a href="http://fortawesome.github.com/Font-Awesome/">Font Awesome</a>.</p>

<pre><code>// Example: {{rating|stars}}

Mark.pipes.stars = function (rating) {
    var n = Math.round(+rating * 2) / 2;

    return new Array(Math.floor(n) + 1).join("&amp;#xf005;") + (n % 1 ? "&amp;#xf089;" : "");
};
</code></pre>

<p>Get more pipes in the <a href="https://github.com/adammark/Markup.js">Markup.js</a> repository on GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App Cloud and Kinvey: A one-two punch for content-centric, data-driven apps]]></title>
    <link href="http://www.adammark.net/blog/2012/09/15/app-cloud-and-kinvey-a-one-two-punch-for-content-centric/"/>
    <updated>2012-09-15T15:17:00-04:00</updated>
    <id>http://www.adammark.net/blog/2012/09/15/app-cloud-and-kinvey-a-one-two-punch-for-content-centric</id>
    <content type="html"><![CDATA[<p>For many developers, <a href="http://appcloud.brightcove.com">App Cloud</a> is a one-stop shop for all their
application needs. It&#8217;s got a robust SDK and a <em>sweet suite</em> of runtime cloud
services like image transcoding, data feed optimization, and cross-platform
push notifications. But no platform can do everything. While App Cloud is
primarily concerned with delivering content to apps, services like <a href="http://www.kinvey.com">Kinvey</a>
can help you manage the river of data that users might generate from inside
those apps.</p>

<p>Kinvey is remarkably easy to use. In just a few minutes, I created an account,
set up an &#8220;app&#8221; in the Kinvey console, created a &#8220;collection&#8221; of friends, and
started populating the collection from a few lines of JavaScript in my App
Cloud app.</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-kinvey.jpg" alt="Kinvey Console" /></p>

<p>Adding a friend to my &#8220;friends&#8221; collection was a snap:</p>

<pre><code>function saveFriend(firstName, lastName) {
    var entity = new Kinvey.Entity({
        firstName: firstName,
        lastName: lastName
    }, "friends");

    entity.save({
        success: function(friend) {
            console.log(friend);
        },
        error: function(err) {
            console.log(err);
        }
    });
}
</code></pre>

<p>Querying the collection was just as straightforward:</p>

<pre><code>function findFriendsByLastName(lastName) {
    var query = new Kinvey.Query();
    query.on("lastName").equal(lastName);

    var collection = new Kinvey.Collection("friends");
    collection.setQuery(query);

    collection.fetch({
        success: function (list) {
            list.forEach(function (item) {
                console.log(item.attr.firstName, item.attr.lastName);
            });
        },
        error: function (err) {
            console.log(err)
        }
    });
}
</code></pre>

<p>It was also a cinch to create new user accounts for permissioning purposes:</p>

<pre><code>var user = {
    username: "AdamBomb",
    password: "k@b00m!",
    name: "Adam Mark"
};

Kinvey.User.create(user,
    success: function(user) {
        console.log(user);
    },
    error: function(err) {
        console.log(err);
    }
});
</code></pre>

<p>Together, App Cloud and Kinvey are a one-two punch for making high-performing,
cross-platform apps backed by powerful content and data services. To make it
easy for developers to get started with both platforms, App Cloud and Kinvey
collaborated on a <a href="http://docs.kinvey.com/js-app-cloud-tutorial.html">simple demo app</a> that shows how to create users and
store user data in the cloud.</p>

<p>Want to dive deeper? Check out the <a href="http://docs.kinvey.com/js-developers-guide.html">Kinvey JavaScript Developer&#8217;s Guide</a>
and the <a href="http://support.brightcove.com/en/docs/tutorial-creating-simple-app">Quick Start to App Cloud</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting to the promised land of cross-platform, device-independent displays]]></title>
    <link href="http://www.adammark.net/blog/2012/08/24/getting-to-the-promised-land-of-cross-platform/"/>
    <updated>2012-08-24T15:33:00-04:00</updated>
    <id>http://www.adammark.net/blog/2012/08/24/getting-to-the-promised-land-of-cross-platform</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been leaning heavily on <a href="http://www.w3.org/TR/css3-mediaqueries/">CSS Media Queries</a> and <a href="http://www.html5rocks.com/en/tutorials/flexbox/quick/">Flexbox</a> to build
<a href="http://appcloud.brightcove.com">App Cloud</a> apps that adapt to both portrait and landscape modes. For
example, I made a video playlist that flows from top to bottom in portrait
mode and left to right in landscape mode:</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-orientation.jpg" alt="Portrait and landscape orientations" /></p>

<p>I also use CSS to build “universal” apps that adapt intelligently to different
form factors. The properties <code>min-device-width</code> and <code>max-device-width</code> can
help detect whether an app is running on something the size of a phone or
something the size of a tablet. Smashing Magazine has a <a href="http://mobile.smashingmagazine.com/2010/07/19/how-to-use-css3-media-queries-to-create-a-mobile-version-of-your-website/">good tutorial</a> on
this subject.</p>

<p>But CSS alone can&#8217;t get me to the promised land of cross-platform,
device-independent displays. Here&#8217;s where it comes up short:</p>

<ul>
<li><p><strong>CSS can&#8217;t change the behavior of an app.</strong> It can only affect presentation
characteristics. Except for toggling the visiblity of certain page elements or
adjusting their metrics, it&#8217;s nearly impossible to apply device-specific or
orientation-based functionality without the help of JavaScript.</p></li>
<li><p><strong>CSS can&#8217;t resize images.</strong> Yeah, you heard me. CSS can scale down an
image, but it can&#8217;t resize an image. A 250KB image is still 250KB whether you
display it at 100% or 50% of its intrinsic size. To properly scale images for
all kinds of devices, you&#8217;ll need the help of a transcoding service.</p></li>
</ul>


<p>Getting to the promised land—we&#8217;re talking about apps that adapt to portrait
and landscape modes and work across a variety of devices and perform really
well—is easy with App Cloud. Here&#8217;s how.</p>

<h2>Responding to orientation changes</h2>

<p>If you know the current orientation—and if you know when it changes—you can
make intelligent decisions about the user experience. For example, you might
want to load some extra data or transform the UI entirely when the user
switches into landscape mode:</p>

<pre><code>// get the current orientation ("landscape" or "portrait")
var orientation = bc.context.viewOrientation;

// listen for an orientation change
$(bc).on("vieworientationchange", function (evt, result) {
    orientation = result.orientation;

    if (result.orientation === "landscape") {
        // do something!
    }
    else {
        // do something else!
    }
});
</code></pre>

<h2>Distinguishing between phones and tablets</h2>

<p>If you know whether your app is running on a phone or tablet, you can deliver
specific functionality to each form factor from a single codebase. For
example, here&#8217;s a factory method that instantiates one type of BlogView if
running on a phone, another if running on a tablet:</p>

<pre><code>BlogView.factory = function () {
    return getDeviceType() === "phone" ? new PhoneBlogView() : new TabletBlogView();
};
</code></pre>

<p>There are a few ways to determine the device type. A simple method is to look
at the width and height of the window, multiply them together, and evaluate
the result:</p>

<pre><code>function getDeviceType() {
    return innerWidth * innerHeight &lt;= 320 * 480 ? "phone" : "tablet";
}
</code></pre>

<p>Here&#8217;s a similar technique from <a href="http://www.html5rocks.com/en/mobile/cross-device/">HTML5rocks.com</a>:</p>

<pre><code>function getDeviceType() {
    return window.matchMedia("(max-width: 650px)").matches ? "phone" : "tablet";
}
</code></pre>

<p>These methods are great if your definition of a phone is somewhat fast and
loose (some Android phones are as big as tablets). Instead, consider
categorizing your target devices as &#8220;big&#8221; and &#8220;small&#8221;:</p>

<pre><code>function getDeviceType() {
    return window.matchMedia("(max-width: 650px)").matches ? "small" : "big";
}
</code></pre>

<h2>Distinguishing between operating systems</h2>

<p>Sometimes it&#8217;s necessary to know which operating system you&#8217;re running on. App
Cloud makes this easy:</p>

<pre><code>var os = bc.context.os;

if (os === "ios") {
    // do something
} else if (os === "android") {
    // do something else
}
</code></pre>

<p>In the above example, &#8220;doing something&#8221; might mean loading different
stylesheets or disabling a certain feature that isn&#8217;t available on Android.</p>

<h2>Resizing images</h2>

<p>The pièce de résistance of responsive design is being able to resize and crop
images on the fly based on runtime conditions such as screen size and pixel
density. You can do this with App Cloud&#8217;s <a href="http://support.brightcove.com/en/docs/transcoding-images">image transcoding API</a>.</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-transcode-before-after.jpg" alt="Before and after images" /></p>

<p>It&#8217;s easy to use JavaScript to compose service URLs based on screen metrics or
other layout constraints. Here&#8217;s a simple example:</p>

<pre><code>function transcode(src, width, height) {
    return "http://transcode.appcloud.brightcove.com?image=" + src +
        "&amp;width=" + width + "&amp;height=" + height;
}
</code></pre>

<p>If you want to support retina displays, just double the width and height if
<code>window.devicePixelRatio</code> equals 2:</p>

<pre><code>function transcode(src, width, height) {
    if (window.devicePixelRatio === 2) {
        width *= 2;
        height *= 2;
    }

    return "http://transcode.appcloud.brightcove.com?image=" + src +
        "&amp;width=" + width + "&amp;height=" + height;
}
</code></pre>

<p>Retina images are typically four times as big as normal images (double the
width times double the height), so consider using a multiplier between 1 and 2
to lighten the load a bit while still improving quality.</p>

<p>You can also crop images with the image transcoding API rather than rely on
CSS tricks. Remember, every bit counts in a mobile app. Load only what you
need when you need it.</p>

<h2>Learn more</h2>

<p>You can see all of these techniques at work in the <a href="https://github.com/BrightcoveOS/App-Cloud-Demos">App Cloud Demos</a>
repo on GitHub. The promised land is closer than you think!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Launching external apps in App Cloud]]></title>
    <link href="http://www.adammark.net/blog/2012/08/06/launching-external-apps-in-app-cloud/"/>
    <updated>2012-08-06T15:44:00-04:00</updated>
    <id>http://www.adammark.net/blog/2012/08/06/launching-external-apps-in-app-cloud</id>
    <content type="html"><![CDATA[<p>Sometimes it&#8217;s necessary to launch an external app from within your own app.
<em>After all, your app can&#8217;t do everything!</em> In <a href="http://appcloud.brightcove.com">App Cloud</a>, it&#8217;s easy to do
with the device method <code>bc.device.openURI()</code>.</p>

<p>Say you want to open an external web browser whenever a user taps a button:</p>

<pre><code>$("#exampleButton").on("tap", function (evt) {
    // both callback functions are optional
    bc.device.openURI("http://www.example.com", onSuccess, onError);
});
</code></pre>

<p>Easy enough! But what if you have many buttons, each leading to a different
URI? Consider embedding each URI in a data attribute:</p>

<pre><code>&lt;button data-href="http://www.example.com"&gt;Open me&lt;/button&gt;
&lt;button data-href="http://www.example.net"&gt;Me too!&lt;/button&gt;
</code></pre>

<p>Then you can listen for a tap event on any element having a &#8220;data-href&#8221;
attribute and extract the URI from that element:</p>

<pre><code>$("[data-href]").on("tap", function (evt) {
    var uri = this.getAttribute("data-href");
    bc.device.openURI(uri, onSuccess, onError);
});
</code></pre>

<h2>Special cases</h2>

<p>In some cases, iOS uses specific apps to handle special types of URLs. For
example, any URL beginning with &#8220;http://maps.google.com&#8221; opens in the Maps
app:</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-open-uri-ios.jpg" alt="iOS screen shot" /></p>

<p>Android may present the user with several options in order to determine the
&#8220;intent&#8221; of the action:</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-open-uri-android.jpg" alt="Android screen shot" /></p>

<h2>Using modal windows</h2>

<p>If you&#8217;re simply opening a web page, you might want to open it modally instead
of bouncing the user out of your app. Just set &#8220;modalWebBrowser&#8221; to true in
the device call:</p>

<pre><code>bc.device.openURI(url, onSuccess, onError, { modalWebBrowser: true });
</code></pre>

<p>You can also use links to accomplish the same thing without JavaScript:</p>

<pre><code>&lt;a href="http://www.example.com"&gt;For example ...&lt;/a&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inside the App Cloud Workshop: Understanding your apps in development mode]]></title>
    <link href="http://www.adammark.net/blog/2012/08/03/inside-the-app-cloud-workshop/"/>
    <updated>2012-08-03T15:55:00-04:00</updated>
    <id>http://www.adammark.net/blog/2012/08/03/inside-the-app-cloud-workshop</id>
    <content type="html"><![CDATA[<p>The <a href="http://appcloud.brightcove.com">App Cloud</a> Workshop app for <a href="http://bit.ly/iworkshop">iOS</a> and <a href="http://bit.ly/aworkshop">Android</a> is an amazing
tool for app developers. It lets you preview your apps in the palm of your
hand without the need for complex toolchains like XCode or the Android
Developer Tools, and it mimics the web development workflow: <em>Code, Refresh,
Repeat</em>.</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-workshop.jpg" alt="App Cloud Workshop" /></p>

<p>But there are some subtle differences between how an App Cloud app behaves in
<em>development mode</em> and how it behaves in <em>production mode</em> as a compiled
binary. Here’s what you should keep in mind:</p>

<ul>
<li><p>Your app will load a bit more slowly in development mode because all of its
assets—HTML files, scripts, stylesheets, images, etc.—are fetched from an
external server. In a compiled app, most or all of these assets will be baked
into the binary package and loaded from disk.</p></li>
<li><p>In development mode, your app will open without a launch icon or splash
screen. These assets are added during the <a href="http://support.brightcove.com/en/docs/publishing-app">publishing process</a>. When a user
opens your published app, they’ll see the launch screen for a few seconds as
the app loads.</p></li>
<li><p>You might see a blank white screen in the Workshop as you load and refresh
each View. In a compiled app, you might only see this happen if a View is
“torn down” by the app container in order to reclaim memory, or if your app
has Views that live deep inside the “More &#8230;” menu.</p></li>
<li><p>In the Workshop, a developer can refresh individual Views and even restart an
app when it behaves poorly or strangely, but these options aren’t available to
users in a published app. (Developers should “stress test” their finished apps
for extended periods of time in order to identify issues that might only
surface after heavy use.)</p></li>
<li><p>Some device functions behave differently in the Workshop. For example, when
downloading a file with the <a href="http://blog.brightcove.com/en/2012/07/get-download-app-clouds-file-download-api">File Download API</a>, the downloaded file is
inaccessible in the Workshop. This particular quirk and others are explained
in the App Cloud <a href="http://docs.brightcove.com/en/app-cloud-api/core/index.html">API docs</a>.</p></li>
<li><p>A few App Cloud services don’t work in development mode, including push
notifications and analytics.</p></li>
</ul>


<p>The only way to truly test the behavior of your finished app is to publish it
and install it on your device before deploying it to the app stores. On iOS,
you can create a development certificate or <a href="http://stackoverflow.com/questions/4955605/what-is-an-adhoc-certificate"><em>ad hoc</em></a> certificate for this
purpose. On Android, you can <a href="http://www.techrepublic.com/blog/smartphones/how-to-side-load-apps-on-your-android-device/3114">side-load</a> your app onto a phone or tablet.</p>

<p>When used properly and in tandem with rigorous testing practices, the Workshop
is an invaluable part of the App Cloud experience. Pretty soon you’ll wonder
how you ever got by without it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A font of icons for your App Cloud app]]></title>
    <link href="http://www.adammark.net/blog/2012/08/03/a-font-of-icons-for-your-app-cloud-app/"/>
    <updated>2012-08-03T15:52:00-04:00</updated>
    <id>http://www.adammark.net/blog/2012/08/03/a-font-of-icons-for-your-app-cloud-app</id>
    <content type="html"><![CDATA[<p>I recently came across an awesome <a href="http://www.html5rocks.com/en/tutorials/webfonts/quick/">web font</a> called <em>Font Awesome</em>. How
appropriate! Each character in the font is a graphical icon instead of a
number of letter. Here&#8217;s what it looks like in my <a href="http://appcloud.brightcove.com">App Cloud</a> demo app
(I&#8217;ve circled each use):</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-fonts.jpg" alt="Screen shots" /></p>

<p>There are a ton of great <a href="http://css-tricks.com/flat-icons-icon-fonts/">icon fonts</a> that you can drop into your App Cloud
app without much fuss—just be sure the font is a TTF font so it can work on
both iOS and Android. Not only will you save a ton of time in the design
stages, these icons will look great at any size and resolution. Just adjust
the <code>font-size</code> property in your CSS!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Digging deeper into App Cloud data feeds]]></title>
    <link href="http://www.adammark.net/blog/2012/07/30/digging-deeper-into-app-cloud-data-feeds/"/>
    <updated>2012-07-30T10:39:00-04:00</updated>
    <id>http://www.adammark.net/blog/2012/07/30/digging-deeper-into-app-cloud-data-feeds</id>
    <content type="html"><![CDATA[<p>Smart Content Sources are a quick and easy way to load data into your
<a href="http://appcloud.brightcove.com">App Cloud</a> apps. Let&#8217;s take a look at what happens under the hood when
you load a content source with <code>bc.core.getData()</code>:</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-feeds-new.png" alt="Screen shot" /></p>

<p>First, no matter what kind of data you&#8217;re loading from App Cloud—a Video Cloud
playlist, a content feed, or a text block—you can call it the same way in your
code:</p>

<pre><code>bc.core.getData("1234567890", handleData, handleError);
</code></pre>

<p>Above, &#8220;1234567890&#8221; is the ID provided by App Cloud Studio. You can also
declare the feed in your manifest file and call it by name:</p>

<pre><code>bc.core.getData("blog", handleData, handleError);
</code></pre>

<p>The function <code>getData()</code> is asynchronous. When it runs successfully, the SDK
calls <code>handleData</code>; otherwise, it calls <code>handleError</code>. The success handler
takes a single argument:</p>

<pre><code>function handleData(data) {
    console.log(data);
}
</code></pre>

<p>If you log the data to the console, as shown above, you might see an object
like this one, which comes from a Video Cloud playlist:</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-feeds-inspect.png" alt="Screen shot" /></p>

<p>So what&#8217;s happening under the hood?</p>

<p>The App Cloud SDK injects a <code>&lt;script&gt;</code> tag into the document and sets the <code>src</code>
attribute to the URL of a content feed:</p>

<pre><code>&lt;script src="http://read.appcloud.brightcove.com/content/50019dfcec8e60277d00fdb8/
fetch?callback=jQuery17207518197379540652_1343651580663&amp;_=1343651580663"&gt;&lt;/script&gt;
</code></pre>

<p>This process has the curious name <a href="http://en.wikipedia.org/wiki/JSONP">JSON-P</a>, or &#8220;JSON with padding.&#8221; Notice
the URL contains the name of a callback function to execute when the script is
loaded.</p>

<p>When the script is loaded, it executes a function that wraps (or &#8220;pads&#8221;) a
JSON object. Here&#8217;s what it looks like inside the Network panel of the Chrome
Developer Tools:</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-feeds-response.png" alt="Screen shot" /></p>

<p>This function, in turn, hands off the data to the callback function specified
in <code>bc.core.getData()</code>.</p>

<p>As you can see, it&#8217;s easy to inspect your data using the Chrome Developer
Tools. And if you want to dig even deeper, consider using an HTTP monitor like
<a href="http://www.charlesproxy.com/">Charles</a>.</p>

<p>Finally, keep in mind that <code>bc.core.getData()</code> is just one way to load data
into your app. You can also use the device functions <code>fetchContentsOfURL()</code>,
<code>postDataToURL()</code>, and <code>requestDownload()</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bug off! App Cloud introduces on-device debugging]]></title>
    <link href="http://www.adammark.net/blog/2012/07/12/bug-off-app-cloud-introduces-on-device-debugging/"/>
    <updated>2012-07-12T10:35:00-04:00</updated>
    <id>http://www.adammark.net/blog/2012/07/12/bug-off-app-cloud-introduces-on-device-debugging</id>
    <content type="html"><![CDATA[<p>Bugs are a way of life in both the physical and virtual worlds. In the
physical world, we can “debug” with fly swatters and bug spray. In the virtual
world, debugging is a bit more sophisticated, as software bugs can be
invisible and unpredictable.</p>

<p>It&#8217;s doubly hard to identify and kill bugs running on a mobile device—unless
you have the right tools. <a href="http://appcloud.brightcove.com">App Cloud</a> developers already have the
<a href="http://bit.ly/iworkshop">Workshop</a> app for previewing and interacting with their work in real time.
Now they can take advantage of on-device debugging—also called <em>remote
debugging</em>—to remotely inspect and tune their code. Here&#8217;s how it works:</p>

<p>First, go to the &#8220;On-Device Debugging&#8221; page in App Cloud Studio. Then open an
app in the Workshop and give the device a good shake. When the camera
launches, scan the QR code that appears in the Studio:</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-debug-scan.png" alt="Screen shot" /></p>

<p>Once a connection is established, you&#8217;ll see a debug panel in the Studio that
looks like the Chrome Developer Tools. From here, you can remotely inspect and
modify the DOM, issue JavaScript commands, and more:</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-debug-console.png" alt="Screen shot" /></p>

<p>As a test, click the &#8220;Console&#8221; tab and type <code>bc.device.alert("Whoa!")</code>. You&#8217;ll
see an alert pop up on the device!</p>

<p>App Cloud&#8217;s on-device debugging is based on the open source <a href="http://phonegap.github.com/weinre/">Weinre</a>
project. It&#8217;s a great tool for developers who want to build rock-solid apps
quickly and easily.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get the download on App Cloud's File Download API]]></title>
    <link href="http://www.adammark.net/blog/2012/07/11/get-the-download-on-app-clouds-file-download-api/"/>
    <updated>2012-07-11T10:30:00-04:00</updated>
    <id>http://www.adammark.net/blog/2012/07/11/get-the-download-on-app-clouds-file-download-api</id>
    <content type="html"><![CDATA[<p>Your content-centric app is only as good as the network it&#8217;s running on—until
now. With <a href="http://appcloud.brightcove.com">App Cloud&#8217;s</a> <a href="http://support.brightcove.com/en/app-cloud/docs/downloading-files-using-app-cloud-api">File Download API</a>, you can permanently store
all kinds of media assets on the device for offline use. Text feeds, images,
PDF documents, audio and video files, you name it. This presents lots of
possibilities for app developers:</p>

<ul>
<li><p>Your apps can degrade gracefully when the user&#8217;s network goes in and out</p></li>
<li><p>You can program your apps to front-load content so they work perfectly in
&#8220;airplane mode&#8221;</p></li>
<li><p>You can allow users to create custom content experiences that work anywhere,
anytime</p></li>
</ul>


<p>Of course, your app can do all of the above. Here&#8217;s a quick look at the
methods and events in the File Download API:</p>

<h3>Methods</h3>

<ul>
<li><p><code>bc.device.requestDownload()</code>: Download a file from a remote URL</p></li>
<li><p><code>bc.device.removeDownload()</code>: Delete a previously downloaded file</p></li>
<li><p><code>bc.device.isDownloadAvailable()</code>: Determine if the device supports file downloading</p></li>
<li><p><code>bc.device.getDownloadInfo()</code>: Get information about previously downloaded files</p></li>
</ul>


<p>As with other device methods, these are asynchronous—you must provide success
and error callbacks.</p>

<h3>Events</h3>

<ul>
<li><p><code>downloadprogress</code>: Dispatched on each progress event at the specified interval (e.g. 5%) (iOS only)</p></li>
<li><p><code>downloadcomplete</code>: Dispatched when a download finishes</p></li>
<li><p><code>downloaderror</code>: Dispatched on certain error conditions</p></li>
</ul>


<p>The API is low-level by design, requiring you to use bc.core.cache() to store
associated metadata in most situations. I&#8217;ve written a <code>FileManager</code> object to
hide some of the implementation details of downloading, retrieving and
deleting files—check it out in the <a href="http://opensource.brightcove.com/project/app-cloud-demos">App Cloud Demos</a> repo, then get
downloading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GET out! How to POST data in App Cloud]]></title>
    <link href="http://www.adammark.net/blog/2012/06/29/get-out-how-to-post-data-in-app-cloud/"/>
    <updated>2012-06-29T11:21:00-04:00</updated>
    <id>http://www.adammark.net/blog/2012/06/29/get-out-how-to-post-data-in-app-cloud</id>
    <content type="html"><![CDATA[<p>The <a href="http://appcloud.brightcove.com">App Cloud</a> SDK provides two device methods for exchanging data with
remote services. You&#8217;re probably familiar with the first one:</p>

<pre><code>bc.device.fetchContentsOfURL(url, successCallback, errorCallback)
</code></pre>

<p>This method makes a cross-domain GET request, AJAX-style, to a remote URL. You
might use it to pull down some tweets:</p>

<pre><code>var url = "http://api.twitter.com/1/statuses/user_timeline.json?id=@adammark75";

var handleData = function (data) {
    var tweets = JSON.parse(data);

    displayTweets(tweets);
};

var handleError = function (error) {
    bc.device.alert("Oops! " + error.errorMessage);
};

bc.device.fetchContentsOfURL(url, handleData, handleError);
</code></pre>

<p>The second method works the same way, except it makes a POST request:</p>

<pre><code>bc.device.postDataToURL(url, successCallback, errorCallback, options)
</code></pre>

<p>You might use it to send credentials to an authentication service:</p>

<pre><code>var url = "https://example.com/login";

var options = {
    data: {
        "username": "boba",
        "password": "fett"
    }
};

var handleData = function (data) {
    var response = JSON.parse(data);

    if (response.authorized) {
        permitUser();
    }
    else {
        rejectUser(response.failureCode);
    }
};

var handleError = function (error) {
    bc.device.alert("Oops! " + error.errorMessage);
};

bc.device.postDataToURL(url, handleData, handleError, options);
</code></pre>

<p>With these two device methods, you can access any REST service, AJAX-style!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Try before you transcode: App Cloud Studio helps you explore image transcoding API]]></title>
    <link href="http://www.adammark.net/blog/2012/06/29/try-before-you-transcode-in-app-cloud-studio/"/>
    <updated>2012-06-29T10:50:00-04:00</updated>
    <id>http://www.adammark.net/blog/2012/06/29/try-before-you-transcode-in-app-cloud-studio</id>
    <content type="html"><![CDATA[<p><a href="http://appcloud.brightcove.com">App Cloud&#8217;s</a> real-time image transcoding API now has a public &#8220;face&#8221; in
App Cloud Studio. Developers can use it to explore the API in a visual way
before writing a single line of code. Just enter an image URL and set a few
parameters like width, height and image quality:</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-transcoding.png" alt="Screen shot" /></p>

<p>It&#8217;s a quick way to determine the best level of compression for some JPEG
photos or the correct cropping algorithm for a series of thumbnail images.</p>

<p>With image transcoding, developers can dramatically improve app performance by
reducing image sizes by <em>90% or more</em>. And it&#8217;s a snap to use—service URLs can
be composed at runtime with a little bit of JavaScript.</p>

<p>See the <a href="http://support.brightcove.com/en/docs/transcoding-images">App Cloud docs</a> for a complete rundown of the API.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using 'on' and 'off' events in App Cloud]]></title>
    <link href="http://www.adammark.net/blog/2012/06/27/using-on-and-off-events-in-app-cloud/"/>
    <updated>2012-06-27T11:04:00-04:00</updated>
    <id>http://www.adammark.net/blog/2012/06/27/using-on-and-off-events-in-app-cloud</id>
    <content type="html"><![CDATA[<p>The latest version of the <a href="http://appcloud.brightcove.com">App Cloud</a> SDK includes jQuery 1.7, which
introduces new methods for handling events.</p>

<h2>Background</h2>

<p>Prior to version 1.7, jQuery gave us a handful of ways to handle events.
You&#8217;re probably familiar with the <code>bind</code> method:</p>

<pre><code>$("li").bind("click", function (evt) {
    // do stuff
});
</code></pre>

<p>Above, we&#8217;re <em>binding</em> an anonymous callback function to every <em>li</em> element in
the document. The callback function has one argument (an object) that contains
all the properties of the captured event. It&#8217;s simply a shorthand for the
following:</p>

<pre><code>var elems = document.querySelectorAll("li");

for (var i = 0; i &lt; elems.length; i++) {
    elems[i].addEventListener("click", function (evt) {
        // do stuff
    });
}
</code></pre>

<p>The jQuery version is nicer, don&#8217;t you think?</p>

<p>The <code>bind</code> method works on elements that already exist in the document. But what
if the elements don&#8217;t exist yet? Enter the <code>live</code> method:</p>

<pre><code>$("li").live("click", function (evt) {
    // do stuff
});
</code></pre>

<p>The <code>live</code> method works on matched elements now or in the future by attaching
a single event listener to the document root element and then inspecting the
event data to determine which specific handlers to trigger. Pretty handy. The
<code>delegate</code> method works in a similar fashion, although you can specify a scope:</p>

<pre><code>$("ul").delegate("li", "click", function (evt) {
    // do stuff
});
</code></pre>

<p>Each of these methods has a corresponding function to remove event listeners:
<em>bind</em> and <em>unbind</em>, <em>live</em> and <em>die</em>, <em>delegate</em> and <em>undelegate</em>.</p>

<h2>New in jQuery 1.7</h2>

<p>In jQuery 1.7, all the above methods are replaced with <code>on</code> and <code>off</code>. There
are two ways to use <code>on</code>:</p>

<pre><code>$("#dataTable tbody tr").on("tap", function (evt) {
    // do stuff
});

$("#dataTable tbody").on("tap", "tr", function (evt) {
    // do stuff
});
</code></pre>

<p>The first technique is like using <code>bind</code>; the second technique is like using
<code>delegate</code> and is more efficient when working with large DOM trees.</p>

<p>See the <a href="http://docs.jquery.com">jQuery docs</a> for a complete rundown.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get two layouts for the price of one with CSS Media Queries]]></title>
    <link href="http://www.adammark.net/blog/2012/05/24/get-two-layouts-for-the-price-of-one-with-css-media-queries/"/>
    <updated>2012-05-24T11:25:00-04:00</updated>
    <id>http://www.adammark.net/blog/2012/05/24/get-two-layouts-for-the-price-of-one-with-css-media-queries</id>
    <content type="html"><![CDATA[<p><img src="http://www.adammark.net/images/blog/app-cloud-orientation.jpg" alt="Screen Shot" /></p>

<p>Some <a href="http://appcloud.brightcove.com">App Cloud</a> developers have asked me how to change the layout of a
view depending on the device&#8217;s orientation. The simplest way—and this is
really very simple—is to use <a href="https://www.google.com/search?q=css3+media+queries+tutorial">Media Queries</a>:</p>

<pre><code>@media all and (orientation: portrait) {
    /* CSS rules here */
}

@media all and (orientation: landscape) {
    /* CSS rules here */
}
</code></pre>

<p>For example, let&#8217;s say you want to change the body color from red to green
when the user rotates the device from portrait to landscape:</p>

<pre><code>@media all and (orientation: portrait) {
    body {
        color: red;
    }
}
@media all and (orientation: landscape) {
    body {
        color: green;
    }
}
</code></pre>

<p>Add the above code to your stylesheet and see what happens. (You can test it
in your Webbrowser by resizing the window.)</p>

<p>It&#8217;s not necessary to put all your styles inside the media queries—just the
styles that are specific to portrait or landscape mode.</p>

<p>Combine Media Queries with the <a href="http://www.html5rocks.com/en/tutorials/flexbox/quick/">Flexible Box Model</a> and now you&#8217;re cooking
with gas!</p>

<p>Two notes: First, you must allow for orientation changes in the SDK by calling
<code>bc.device.setAutoRotateDirections(["all"])</code>. Second, CSS rules can only
affect the layout, not the behavior, of your app. You can listen for a
<code>vieworientationchange</code> event if you need to perform some action when the user
rotates the device.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making better markup with Markup.js]]></title>
    <link href="http://www.adammark.net/blog/2012/05/14/making-better-markup-with-markup-dot-js/"/>
    <updated>2012-05-14T17:40:00-04:00</updated>
    <id>http://www.adammark.net/blog/2012/05/14/making-better-markup-with-markup-dot-js</id>
    <content type="html"><![CDATA[<p>Unlike traditional web sites, <a href="http://appcloud.brightcove.com">App Cloud</a> apps compose HTML strings in the
client using JavaScript. There are two ways to go about this: a <em>good way</em> and
a <em>bad way</em>.</p>

<p>First, the <em>bad way</em>. Consider the following code, in which an array of articles
is manually formatted into a chunk of HTML code:</p>

<pre><code>var html = "&lt;ul&gt;";

for (var i = articles.length - 1; i &gt;= 0; i--) {
    html += "&lt;li&gt;";
    html += "&lt;div&gt;" + articles[i].title.toUpperCase() + "&lt;/div&gt;";
    html += "&lt;small&gt;";
    html += articles[i].description.substr(0, 50);
    if (articles[i].description.length &gt; 50) { 
        html += "...";
    }
    html += "&lt;/small&gt;";
    html += "&lt;/li&gt;";
}

html += "&lt;/ul&gt;";
</code></pre>

<p>Notice how even simple tasks, like adding an ellipsis to descriptions longer
than 50 words, can force you to write a lot of code. This gets messy fast!</p>

<p>Now, the <em>good way</em>: Take the same array of articles and generate the
equivalent HTML using <a href="https://github.com/adammark/Markup.js">Markup.js</a>:</p>

<pre><code>&lt;ul&gt;
    {{articles|reverse}}
        &lt;li&gt;
            &lt;div&gt;{{title|upcase}}&lt;/div&gt;
            &lt;small&gt;{{description|chop&gt;50}}&lt;/small&gt;
        &lt;/li&gt;
    {{/articles}}
&lt;/ul&gt;
</code></pre>

<p>Much nicer! As you can see, Markup.js takes the pain out of converting
structured data (like an array of articles) into HTML or another text format.
And since it&#8217;s part of the App Cloud SDK, you can quickly and easily separate
your <em>presentation logic</em> from your <em>business logic</em>. Let&#8217;s say you&#8217;re
handling the results of a data request:</p>

<pre><code>function handleData(data) {
    var template = bc.templates["articles-list-template"];
    var context = { articles: data };
    var markup = Mark.up(template, context);

    document.getElementById("results").innerHTML = markup;
}
</code></pre>

<p>In the above code, Markup.js takes a template string, injects it with a
<code>context</code> object, and returns a new string. The new string is then inserted into
the document. There&#8217;s no HTML at all in your JavaScript code! (You could
easily modify this code to select one of several templates based on a runtime
condition or device characteristic.)</p>

<p>Notice the object <code>bc.templates</code>? It&#8217;s populated automatically with strings
from an external text file (as defined in manifest.json):</p>

<pre><code>===== hello-template
&lt;p&gt;Hello, &lt;span class="username"&gt;!&lt;/span&gt;&lt;/p&gt;

===== goodbye-template
&lt;p&gt;Goodbye, &lt;span class="username"&gt;!&lt;/span&gt;&lt;/p&gt;
</code></pre>

<p>In this example, the text file contains two Markup templates: <code>hello-template</code>
and <code>goodbye-template</code>. You can call them by name, as shown above.</p>

<p>Markup.js comes with more than 40 built-in &#8220;pipes&#8221; for transforming data, and
it&#8217;s easy to write your own. Check out the <a href="https://github.com/adammark/Markup.js">complete docs</a> on GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Where in the world is App Cloud?]]></title>
    <link href="http://www.adammark.net/blog/2012/05/09/where-in-the-world-is-app-cloud/"/>
    <updated>2012-05-09T16:03:00-04:00</updated>
    <id>http://www.adammark.net/blog/2012/05/09/where-in-the-world-is-app-cloud</id>
    <content type="html"><![CDATA[<p>The App Cloud team circled the globe <em>twice</em> in the last month to run developer
kitchens in Seoul, Tokyo and Sydney. We trained more than 70 developers and
racked up thousands of frequent flier miles to boot! Here are some shots from
the events:</p>

<h4>Seoul, South Korea</h4>

<p><img src="http://www.adammark.net/images/blog/app-cloud-dev-kitchen-seoul-1.jpg" alt="Seoul" /></p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-dev-kitchen-seoul-2.jpg" alt="Seoul" /></p>

<h4>Tokyo, Japan</h4>

<p><img src="http://www.adammark.net/images/blog/app-cloud-dev-kitchen-tokyo-1.jpg" alt="Tokyo" /></p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-dev-kitchen-tokyo-2.jpg" alt="Tokyo" /></p>

<h4>Sydney, Australia</h4>

<p><img src="http://www.adammark.net/images/blog/app-cloud-dev-kitchen-sydney-1.jpg" alt="Sydney" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Three ways to use text blocks in App Cloud]]></title>
    <link href="http://www.adammark.net/blog/2012/05/09/three-ways-to-use-text-blocks-in-app-cloud/"/>
    <updated>2012-05-09T11:17:00-04:00</updated>
    <id>http://www.adammark.net/blog/2012/05/09/three-ways-to-use-text-blocks-in-app-cloud</id>
    <content type="html"><![CDATA[<p>With <a href="http://appcloud.brightcove.com">App Cloud</a> text blocks, you can store arbitrary blocks of text in the
cloud and retrieve them for any purpose you desire. Now you can bypass your
CMS (and your IT department!) when you need to manage certain types of
lightweight data in your apps.</p>

<p>To create a text block, go to the Content section of App Cloud Studio, then
click &#8220;New Content Source&#8221;, then click &#8220;Text Content&#8221;:</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-text-new.png" alt="Screen shot" /></p>

<p>Then enter a name and some text. That&#8217;s it! Whenever you want to change the
text, just click &#8220;Edit&#8221; and App Cloud will save a new version. (You can revert
to an old version at any time.)</p>

<p>At the code layer, you can request a text block with <code>bc.core.getData()</code>, just
like a content feed:</p>

<pre><code>bc.core.getData("my-text-block", function (data) {
    var myText = data.text;
    // do stuff
});
</code></pre>

<p>Here are three ways to use text blocks inside your app:</p>

<h2>1. HTML text</h2>

<p>Use a text block as a flexible messaging area:</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-text-html.png" alt="Screen shot" /></p>

<p>Then insert the text into DOM using jQuery or the method of your choice:</p>

<pre><code>bc.core.getData("welcome-message", function (data) {
    $("#welcome-message").html(data.text);
});
</code></pre>

<h2>2. JSON text</h2>

<p>Use a text block to store structured data in JSON format:</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-text-json.png" alt="Screen shot" /></p>

<p>When you load the text, make sure to parse it using JSON.parse():</p>

<pre><code>bc.core.getData("produce", function (data) {
    var produce = JSON.parse(data.text);
    ...
});
</code></pre>

<h2>3. CSV text</h2>

<p>Store a table of information as CSV:</p>

<p><img src="http://www.adammark.net/images/blog/app-cloud-text-csv.png" alt="Screen shot" /></p>

<p>After you load the data, split the lines, then split each line on the comma
characters:</p>

<pre><code>bc.core.getData("directory", function (data) {
    var people = [];
    var rows = data.text.trim().split("\n");

    for (var i in rows) {
        var row = rows[i].split(",");

        people.push({
            "firstName": row[0],
            "lastName": row[1],
            "phone": row[2],
            "title": row[3],
            "email": row[4]
        });
    }
});
</code></pre>

<p>These are just a few ways to use text blocks. As you can see, you can save any
kind of text format you want—it&#8217;s flexible by design!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Dropbox to host your App Cloud app in development mode]]></title>
    <link href="http://www.adammark.net/blog/2012/04/02/using-dropbox-to-host-your-app-cloud-app/"/>
    <updated>2012-04-02T17:07:00-04:00</updated>
    <id>http://www.adammark.net/blog/2012/04/02/using-dropbox-to-host-your-app-cloud-app</id>
    <content type="html"><![CDATA[<p>If you can&#8217;t create a local web server for any reason—too lazy, too many
network restrictions, what&#8217;s a web server?—you can use a public <a href="http://www.dropbox.com/">Dropbox</a>
folder instead.</p>

<p>Just drop your template into the &#8220;Public&#8221; folder inside your Dropbox
directory. Then right-click on your manifest file (manifest.json) and select
<em>Dropbox > Copy Public Link</em>. You should get a URL like this:</p>

<pre><code>http://dl.dropbox.com/u/12345678/mytemplate/manifest.json
</code></pre>

<p>Enter this URL in the <a href="http://bit.ly/iworkshop">Workshop app</a> and you&#8217;re off to the races! You can also
view your HTML pages in Chrome and debug them with the Developer Tools.</p>

<p><em>Warning! Your files will be accessible to anyone who knows the URL, so share wisely.</em></p>
]]></content>
  </entry>
  
</feed>
